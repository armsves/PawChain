/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace HealthRegistry {
  export type RecordStruct = {
    timestamp: BigNumberish;
    details: string;
    vet: AddressLike;
  };

  export type RecordStructOutput = [
    timestamp: bigint,
    details: string,
    vet: string
  ] & { timestamp: bigint; details: string; vet: string };
}

export interface HealthRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addHealthRecord"
      | "authorizeVet"
      | "authorizedVets"
      | "getHealthRecords"
      | "healthRecords"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "HealthRecordAdded" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addHealthRecord",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeVet",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedVets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "healthRecords",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addHealthRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeVet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedVets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace HealthRecordAddedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    vet: AddressLike,
    details: string
  ];
  export type OutputTuple = [tokenId: bigint, vet: string, details: string];
  export interface OutputObject {
    tokenId: bigint;
    vet: string;
    details: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HealthRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): HealthRegistry;
  waitForDeployment(): Promise<this>;

  interface: HealthRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addHealthRecord: TypedContractMethod<
    [tokenId: BigNumberish, details: string],
    [void],
    "nonpayable"
  >;

  authorizeVet: TypedContractMethod<
    [vet: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  authorizedVets: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getHealthRecords: TypedContractMethod<
    [tokenId: BigNumberish],
    [HealthRegistry.RecordStructOutput[]],
    "view"
  >;

  healthRecords: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string] & {
        timestamp: bigint;
        details: string;
        vet: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addHealthRecord"
  ): TypedContractMethod<
    [tokenId: BigNumberish, details: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeVet"
  ): TypedContractMethod<
    [vet: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedVets"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getHealthRecords"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [HealthRegistry.RecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "healthRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string] & {
        timestamp: bigint;
        details: string;
        vet: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "HealthRecordAdded"
  ): TypedContractEvent<
    HealthRecordAddedEvent.InputTuple,
    HealthRecordAddedEvent.OutputTuple,
    HealthRecordAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "HealthRecordAdded(uint256,address,string)": TypedContractEvent<
      HealthRecordAddedEvent.InputTuple,
      HealthRecordAddedEvent.OutputTuple,
      HealthRecordAddedEvent.OutputObject
    >;
    HealthRecordAdded: TypedContractEvent<
      HealthRecordAddedEvent.InputTuple,
      HealthRecordAddedEvent.OutputTuple,
      HealthRecordAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
