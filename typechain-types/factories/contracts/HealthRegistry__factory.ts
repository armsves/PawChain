/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  HealthRegistry,
  HealthRegistryInterface,
} from "../../contracts/HealthRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "vet",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "details",
        type: "string",
      },
    ],
    name: "HealthRecordAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "details",
        type: "string",
      },
    ],
    name: "addHealthRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vet",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "authorizeVet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "authorizedVets",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getHealthRecords",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "details",
            type: "string",
          },
          {
            internalType: "address",
            name: "vet",
            type: "address",
          },
        ],
        internalType: "struct HealthRegistry.Record[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "healthRecords",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "details",
        type: "string",
      },
      {
        internalType: "address",
        name: "vet",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b919061019e565b60405180910390fd5b6100938161009960201b60201c565b506101b9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101888261015d565b9050919050565b6101988161017d565b82525050565b60006020820190506101b3600083018461018f565b92915050565b6111dc80620001c96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610115578063a98cd9e714610133578063d95a19a51461014f578063f2fde38b1461017f57610088565b806324eee43d1461008d5780632a22c175146100bf578063715018a6146100db5780638315a278146100e5575b600080fd5b6100a760048036038101906100a291906108af565b61019b565b6040516100b6939291906109cf565b60405180910390f35b6100d960048036038101906100d49190610a71565b61028a565b005b6100e36102ed565b005b6100ff60048036038101906100fa9190610ab1565b610301565b60405161010c9190610aed565b60405180910390f35b61011d610321565b60405161012a9190610b08565b60405180910390f35b61014d60048036038101906101489190610b88565b61034a565b005b61016960048036038101906101649190610be8565b610532565b6040516101769190610d8f565b60405180910390f35b61019960048036038101906101949190610ab1565b610696565b005b600160205281600052604060002081815481106101b757600080fd5b9060005260206000209060030201600091509150508060000154908060010180546101e190610de0565b80601f016020809104026020016040519081016040528092919081815260200182805461020d90610de0565b801561025a5780601f1061022f5761010080835404028352916020019161025a565b820191906000526020600020905b81548152906001019060200180831161023d57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b61029261071c565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6102f561071c565b6102ff60006107a3565b565b60026020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610e5d565b60405180910390fd5b60016000848152602001908152602001600020604051806060016040528042815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013373ffffffffffffffffffffffffffffffffffffffff1681525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010190816104a69190611058565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050507febe2314b4340b92f69bd0553d79e51434bd6670cbfe82fa44733e3ca36e6a8d6833384846040516105259493929190611166565b60405180910390a1505050565b606060016000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561068b5783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546105a490610de0565b80601f01602080910402602001604051908101604052809291908181526020018280546105d090610de0565b801561061d5780601f106105f25761010080835404028352916020019161061d565b820191906000526020600020905b81548152906001019060200180831161060057829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610567565b505050509050919050565b61069e61071c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107105760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107079190610b08565b60405180910390fd5b610719816107a3565b50565b610724610867565b73ffffffffffffffffffffffffffffffffffffffff16610742610321565b73ffffffffffffffffffffffffffffffffffffffff16146107a157610765610867565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107989190610b08565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b6000819050919050565b61088c81610879565b811461089757600080fd5b50565b6000813590506108a981610883565b92915050565b600080604083850312156108c6576108c561086f565b5b60006108d48582860161089a565b92505060206108e58582860161089a565b9150509250929050565b6108f881610879565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561093857808201518184015260208101905061091d565b60008484015250505050565b6000601f19601f8301169050919050565b6000610960826108fe565b61096a8185610909565b935061097a81856020860161091a565b61098381610944565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109b98261098e565b9050919050565b6109c9816109ae565b82525050565b60006060820190506109e460008301866108ef565b81810360208301526109f68185610955565b9050610a0560408301846109c0565b949350505050565b610a16816109ae565b8114610a2157600080fd5b50565b600081359050610a3381610a0d565b92915050565b60008115159050919050565b610a4e81610a39565b8114610a5957600080fd5b50565b600081359050610a6b81610a45565b92915050565b60008060408385031215610a8857610a8761086f565b5b6000610a9685828601610a24565b9250506020610aa785828601610a5c565b9150509250929050565b600060208284031215610ac757610ac661086f565b5b6000610ad584828501610a24565b91505092915050565b610ae781610a39565b82525050565b6000602082019050610b026000830184610ade565b92915050565b6000602082019050610b1d60008301846109c0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610b4857610b47610b23565b5b8235905067ffffffffffffffff811115610b6557610b64610b28565b5b602083019150836001820283011115610b8157610b80610b2d565b5b9250929050565b600080600060408486031215610ba157610ba061086f565b5b6000610baf8682870161089a565b935050602084013567ffffffffffffffff811115610bd057610bcf610874565b5b610bdc86828701610b32565b92509250509250925092565b600060208284031215610bfe57610bfd61086f565b5b6000610c0c8482850161089a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c4a81610879565b82525050565b600082825260208201905092915050565b6000610c6c826108fe565b610c768185610c50565b9350610c8681856020860161091a565b610c8f81610944565b840191505092915050565b610ca3816109ae565b82525050565b6000606083016000830151610cc16000860182610c41565b5060208301518482036020860152610cd98282610c61565b9150506040830151610cee6040860182610c9a565b508091505092915050565b6000610d058383610ca9565b905092915050565b6000602082019050919050565b6000610d2582610c15565b610d2f8185610c20565b935083602082028501610d4185610c31565b8060005b85811015610d7d5784840389528151610d5e8582610cf9565b9450610d6983610d0d565b925060208a01995050600181019050610d45565b50829750879550505050505092915050565b60006020820190508181036000830152610da98184610d1a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610df857607f821691505b602082108103610e0b57610e0a610db1565b5b50919050565b7f4e6f7420617574686f72697a6564207665740000000000000000000000000000600082015250565b6000610e47601283610909565b9150610e5282610e11565b602082019050919050565b60006020820190508181036000830152610e7681610e3a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f0e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ed1565b610f188683610ed1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610f55610f50610f4b84610879565b610f30565b610879565b9050919050565b6000819050919050565b610f6f83610f3a565b610f83610f7b82610f5c565b848454610ede565b825550505050565b600090565b610f98610f8b565b610fa3818484610f66565b505050565b5b81811015610fc757610fbc600082610f90565b600181019050610fa9565b5050565b601f82111561100c57610fdd81610eac565b610fe684610ec1565b81016020851015610ff5578190505b61100961100185610ec1565b830182610fa8565b50505b505050565b600082821c905092915050565b600061102f60001984600802611011565b1980831691505092915050565b6000611048838361101e565b9150826002028217905092915050565b611061826108fe565b67ffffffffffffffff81111561107a57611079610e7d565b5b6110848254610de0565b61108f828285610fcb565b600060209050601f8311600181146110c257600084156110b0578287015190505b6110ba858261103c565b865550611122565b601f1984166110d086610eac565b60005b828110156110f8578489015182556001820191506020850194506020810190506110d3565b868310156111155784890151611111601f89168261101e565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b60006111458385610909565b935061115283858461112a565b61115b83610944565b840190509392505050565b600060608201905061117b60008301876108ef565b61118860208301866109c0565b818103604083015261119b818486611139565b90509594505050505056fea2646970667358221220cb256a323560e7c26cb7073215fc59f91b62c828e25fdbf25a093dbb8878e3b264736f6c63430008140033";

type HealthRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HealthRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HealthRegistry__factory extends ContractFactory {
  constructor(...args: HealthRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      HealthRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): HealthRegistry__factory {
    return super.connect(runner) as HealthRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HealthRegistryInterface {
    return new Interface(_abi) as HealthRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): HealthRegistry {
    return new Contract(address, _abi, runner) as unknown as HealthRegistry;
  }
}
